import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pyreadstat
import seaborn as sns
import streamlit as st
import tempfile
import re

from math import log2
from scipy.stats import chi2_contingency
from statsmodels.stats.multitest import multipletests
from statsmodels.stats.proportion import proportions_ztest
from scipy.stats import norm
from typing import Dict

st.title("üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ SAV —Ñ–∞–π–ª (SPSS)", type="sav")

if uploaded_file:
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".sav") as tmp:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            tmp.write(uploaded_file.getvalue())
            tmp_path = tmp.name

        # –ß–∏—Ç–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        df, meta = pyreadstat.read_sav(tmp_path)
        old_meta = meta
        n_resp = len(df)
        st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–ø–∏—Å–µ–π: {n_resp}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        import os
        os.unlink(tmp_path)
       
       # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        list_of_questions = []
        for key in old_meta.column_names_to_labels:
          if old_meta.column_names_to_labels[key] in list_of_questions:
            continue
          else:
            list_of_questions.append(old_meta.column_names_to_labels[key])
        meta_inside_out = {}
        for question in list_of_questions:
          for key in old_meta.column_names_to_labels:
            if old_meta.column_names_to_labels[key] == question:
              meta_inside_out[question] = key
              break
        
        if len(list_of_questions) == 0:
            st.error("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤")
        else:
            question = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", list_of_questions)
            col = meta_inside_out[question]

            def is_multi_response(col):
              '''
              –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º (True) –∏–ª–∏ –Ω–µ—Ç (False)
              '''
              if '_' in col:
                prefix = col.split('_')[0]
                matching_keys = [key for key in meta.column_names_to_labels if key.startswith(prefix)]
                matching_labels = set(meta.column_names_to_labels[key] for key in matching_keys)
                return len(matching_keys) > 1 and len(matching_labels) == 1
              return False

            def process_multi_response_1(col):
              '''
              –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è 1 –≤–æ–ø—Ä–æ—Å–∞)
              '''
              if is_multi_response(col):
                data = pd.DataFrame()
                question = meta.column_names_to_labels[col]
                for key in meta.column_names_to_labels:
                  if meta.column_names_to_labels[key] == question:
                    data = pd.concat([data, df[key]],ignore_index=True)
              else:
                data = df[col]
              return(data)

            def unify_questions(labels_dict: Dict[str, str]) -> Dict[str, str]:
                """
                –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —á–∏—Å–ª–æ–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏.
                –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ "13.–ê.", "13.–ë." –ø–æ–ª—É—á–∞—Ç —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
                """
                # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "13" –∏–∑ "13.–ê.")
                prefix_to_text = {}
                for col, label in labels_dict.items():
                    match = re.search(r'^(\d+)', label)  # –ò—â–µ–º —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ
                    if match:
                        prefix = match.group(1)
                        if prefix not in prefix_to_text:
                            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –≤—Å—Ç—Ä–µ—Ç–∏–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                            prefix_to_text[prefix] = label

                # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
                unified = {}
                for col, label in labels_dict.items():
                    match = re.search(r'^(\d+)', label)
                    if match:
                        prefix = match.group(1)
                        if prefix in prefix_to_text:
                            unified[col] = prefix_to_text[prefix]
                    else:
                        unified[col] = label
                return unified

            def remove_prefixes(labels_dict: Dict[str, str]) -> Dict[str, str]:
                """
                –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤–∏–¥–∞ "SEX.", "1.", "Q1." –∏–∑ –º–µ—Ç–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
                """
                cleaned = {}
                for col, label in labels_dict.items():
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "SEX.", "1.", "Q1.", "13.–ê." –∏ —Ç.–¥.
                    cleaned_label = re.sub(r'^([a-zA-Z–∞-—è–ê-–Ø0-9]+\.\s*)+', '', label)
                    cleaned[col] = cleaned_label.strip()
                return cleaned

            def clean_question_labels(meta, mode: str = 'both'):
                """
                –ó–ê–ú–ï–ù–Ø–ï–¢ –∏—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ DataFrame –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—ã–µ.

                –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
                    meta: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω)
                    mode: 'prefix' - —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤,
                          'unify' - —Ç–æ–ª—å–∫–æ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è,
                          'both' - –æ–±–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
                """
                labels = meta.column_names_to_labels.copy()

                if mode in ('unify', 'both'):
                    labels = unify_questions(labels)
                if mode in ('prefix', 'both'):
                    labels = remove_prefixes(labels)

                meta.column_names_to_labels = labels

            def clean_value_labels(meta):
                """
                –ó–ê–ú–ï–ù–Ø–ï–¢ –∏—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ DataFrame –Ω–∞ –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π ‚â•90 (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤).
                –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã:
                    - –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤–∏–¥–∞ '(–ó–ê–ß–ò–¢–ê–¢–¨ –ü–û–°–õ–ï –ü–ê–£–ó–´)', '(–ù–ï –ó–ê–ß–ò–¢–´–í–ê–¢–¨)' –∏ —Ç.–ø.
                    - –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ '–î—Ä—É–≥–æ–µ', —É–¥–∞–ª—è—è –≤—Å—ë –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                """
                replacement_rules = {
                    r'\([^)]+\)\s*': '',  # –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∫–æ–±–æ—á–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
                    r'(–î—Ä—É–≥–æ–µ).*': r'\1' # –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ "–î—Ä—É–≥–æ–µ"
                }

                for var_name, value_labels in meta.variable_value_labels.items():
                    updated_labels = {}
                    for value, label in value_labels.items():
                        if isinstance(value, (int, float)) and value >= 90: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                            new_label = label
                            for pattern, repl in replacement_rules.items():
                                new_label = re.sub(pattern, repl, new_label)
                            updated_labels[value] = new_label.strip()
                        else:
                            updated_labels[value] = label
                    meta.variable_value_labels[var_name] = updated_labels

            clean_question_labels(meta)
            clean_value_labels(meta)
            
            #def get_barplot(col):
            data = process_multi_response_1(col)
            plot_df=data.value_counts().div(n_resp/100)
            plot_df = pd.DataFrame(plot_df)
            plot_df.reset_index(names=['–û—Ç–≤–µ—Ç'], inplace=True)
            plot_df['ans'] = plot_df['–û—Ç–≤–µ—Ç']
            plot_df['ans'] = plot_df['ans'].apply(lambda x: 0 if x < 90 else x)
            plot_df.sort_values(by=['ans', 'count'], ascending = [True, False], inplace=True)
            if col in meta.variable_value_labels:
              plot_df['–û—Ç–≤–µ—Ç'] = plot_df['–û—Ç–≤–µ—Ç'].map(lambda x: meta.variable_value_labels[col][x])
            
            fig, ax = plt.subplots()
            #plt.figure(figsize=(5, 4))
            ax = sns.barplot(x=plot_df['count'], y=plot_df['–û—Ç–≤–µ—Ç'].astype(str), color = '#E62083') #E62083 #12AFFF
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.bar_label(ax.containers[0], label_type = 'edge', padding=5, fontsize=14, fmt = '%.1f%%')
            plt.xticks([])
            plt.yticks(fontsize=10)
            question = meta.column_names_to_labels[col] # —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            if len(question) > 30:
              question = question.replace('? ', '?\n')
              question = question.replace('. ', '.\n')
            plt.title(f'{question}', fontsize=14, pad=10)
            plt.xlabel('', fontsize=1)
            plt.ylabel('', fontsize=1);

            # –î–∏–∞–≥—Ä–∞–º–º–∞
            st.pyplot(fig)

            def convert_to_intervals(col, df = df):
                '''
               –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ
                '''
                if col not in meta.variable_value_labels and df[col].nunique() > 5:
                    if col == 'AGE':
                        bins = [0, 18, 25, 35, 45, 55, 65, float('inf')]
                        labels = ['–¥–æ 18', '18 - 24', '25 - 34', '35 - 44', '45 - 54', '55 - 64', '65+']
                        return pd.cut(df[col], bins = bins, labels=labels, right=False).astype('str')
                    else:
                        binned_col = pd.cut(df[col], bins = 5, right = False, duplicates='drop')
                        return binned_col.apply(lambda x: f'{round(x.left)} - {round(x.right)}').astype('str')
                return df[col]
            
            def process_multi_response(col1, col2):
                '''
                –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–æ–≤
                '''
                data = pd.DataFrame()
                if is_multi_response(col1) and is_multi_response(col2):
                    raise KeyError('–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ 2 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏')
                elif is_multi_response(col1) and not is_multi_response(col2) :
                    for i in [key for key in meta.column_names_to_labels.keys() if key.__contains__(col1.split('_')[0])]:
                         fict_df = df[[col2, i]]
                         fict_df.columns = [col2, col1]
                         data = pd.concat([data, fict_df], ignore_index=True)
                elif not is_multi_response(col1) and is_multi_response(col2):
                    for i in [key for key in meta.column_names_to_labels.keys() if key.__contains__(col2.split('_')[0])]:
                        fict_df = df[[col1, i]]
                        fict_df.columns = [col1, col2]
                        data = pd.concat([data, fict_df], ignore_index=True)
                else:
                    data = df[[col1, col2]]
                return data

            def apply_value_labels(series, is_index=True):
                '''
                –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–µ—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∫ —Å—Ç–æ–ª–±—Ü–∞–º —Ç–∞–±–ª–∏—Ü—ã, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
                '''
                words_to_remove = ['(–ù–ï –ó–ê–ß–ò–¢–´–í–ê–¢–¨) ', '(–ó–ê–ß–ò–¢–ê–¢–¨ –ü–û–°–õ–ï –ü–ê–£–ó–´) ', '(–ó–ê–ß–ò–¢–ê–¢–¨) ', '(–ü–û–°–õ–ï –ü–ê–£–ó–´) ']
                pattern = "|".join(map(re.escape, words_to_remove))

                for question, response in meta.variable_value_labels.items():
                    for key, value in response.items():
                        response[key] = re.sub(pattern, '', value)

                if series.name in meta.variable_value_labels:
                    return series.map(lambda x: meta.variable_value_labels[series.name].get(x, x))
                return series

            def create_crosstab(col1, col2, adjustment_type = 'holm', threshhold=0.05):

                """
                –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç
                —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è —Å –ø–æ–ø—Ä–∞–≤–∫–æ–π –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

                Args:
                    col1 (pd.Series): –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü.
                    col2 (pd.Series): –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü.
                    adjustment_type (str or None): –ú–µ—Ç–æ–¥ –ø–æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ('holm', 'bonferroni', 'fdr_bh' –∏ –¥—Ä.). –ï—Å–ª–∏ None, –ø–æ–ø—Ä–∞–≤–∫–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'holm'.
                    threshhold (float): –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.05.

                Returns:
                    dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–≤—É–º—è –∫–ª—é—á–∞–º–∏:
                        - 'table': —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ (pandas Styler object).
                        - 'notes': —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–∏–ø–æ—Ç–µ–∑
                                   –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
                """
                data = process_multi_response(col1, col2)

                transformed_col1 = convert_to_intervals(col1, data)
                transformed_col2 = convert_to_intervals(col2, data)

                # –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã
                cross_df = pd.crosstab(transformed_col1,
                                       transformed_col2,
                                       margins=True,
                                       margins_name='–í—Å–µ–≥–æ',
                                       normalize='columns')

                cross_df.index = apply_value_labels(cross_df.index)
                cross_df.columns = apply_value_labels(cross_df.columns)

                table = cross_df.style.format(lambda x: round(x*100, 1))\
                                      .background_gradient(cmap = 'Purples')\
                                      .set_caption(f'–¢–∞–±–ª–∏—Ü–∞ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É {col1} –∏ {col2}')

                contingency_table = pd.crosstab(transformed_col1, transformed_col2)
                p_values = []
                comparisons = []

                contingency_table.index = apply_value_labels(contingency_table.index)
                contingency_table.columns = apply_value_labels(contingency_table.columns)

                for i in range(contingency_table.shape[1]):
                   for j in range(contingency_table.shape[0]):
                        for k in range(j+1, contingency_table.shape[0]):
                            success = [contingency_table.iloc[j, i], contingency_table.iloc[k, i]]
                            nobs = [contingency_table.iloc[j, :].sum(axis=0), contingency_table.iloc[k, :].sum(axis=0)]
                            if min(nobs) > 0:
                                _, p_value = proportions_ztest(success, nobs)
                                p_values.append(p_value)
                                comparisons.append(f'{contingency_table.index[j]} vs {contingency_table.index[k]} –≤ –≥—Ä—É–ø–ø–µ {contingency_table.columns[i]}')

                if p_values:
                    if adjustment_type is not None:
                        reject, pvals_corrected, _, _ = multipletests(p_values, method=adjustment_type)
                    else:
                        pvals_corrected = p_values

                    significance_comparisons = [
                        f"{comp} (p = {p_value:.4f}{'*' if p_value < threshhold else ''})"
                        for comp, p_value in zip(comparisons, pvals_corrected)
                        if p_value < 0.1
                    ]

                    significance = "–ó–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –Ω–∏–∂–µ \n" + "\n".join(significance_comparisons) if significance_comparisons else "–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π (p < 0.05)"
                else:
                    significance = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å z-—Ç–µ—Å—Ç (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)"

                notes = f'''
                –í—ã–≤–æ–¥ –æ —Å—Ç–∞—Ç. –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏: \n {significance}
                –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: '–ó–Ω–∞—á–µ–Ω–∏—è –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ %.'
                –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:
                {col1} - {meta.column_names_to_labels[col1]}
                {col2} - {meta.column_names_to_labels[col2]}
                '''

                return {'table': table,
                        'notes': notes}

            question2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç–∏", list_of_questions)
            col2 = meta_inside_out[question2]

            result = create_crosstab(col, col2)
            display(result['table'])
            print(result['notes'])

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
